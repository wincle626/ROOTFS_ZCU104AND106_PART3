/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class mpi_Win */

#ifndef _Included_mpi_Win
#define _Included_mpi_Win
#ifdef __cplusplus
extern "C" {
#endif
#undef mpi_Win_WIN_NULL
#define mpi_Win_WIN_NULL 0L
#undef mpi_Win_FLAVOR_PRIVATE
#define mpi_Win_FLAVOR_PRIVATE 0L
#undef mpi_Win_FLAVOR_SHARED
#define mpi_Win_FLAVOR_SHARED 1L
/*
 * Class:     mpi_Win
 * Method:    createWin
 * Signature: (Ljava/nio/Buffer;IIJJ)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_createWin
  (JNIEnv *, jobject, jobject, jint, jint, jlong, jlong);

/*
 * Class:     mpi_Win
 * Method:    allocateWin
 * Signature: (IIJJLjava/nio/Buffer;)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_allocateWin
  (JNIEnv *, jobject, jint, jint, jlong, jlong, jobject);

/*
 * Class:     mpi_Win
 * Method:    allocateSharedWin
 * Signature: (IIJJLjava/nio/Buffer;)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_allocateSharedWin
  (JNIEnv *, jobject, jint, jint, jlong, jlong, jobject);

/*
 * Class:     mpi_Win
 * Method:    createDynamicWin
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_createDynamicWin
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     mpi_Win
 * Method:    attach
 * Signature: (JLjava/nio/Buffer;I)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_attach
  (JNIEnv *, jobject, jlong, jobject, jint);

/*
 * Class:     mpi_Win
 * Method:    detach
 * Signature: (JLjava/nio/Buffer;)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_detach
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     mpi_Win
 * Method:    getGroup
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_getGroup
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    put
 * Signature: (JLjava/nio/Buffer;IJIIIJI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_put
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    get
 * Signature: (JLjava/nio/Buffer;IJIIIJI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_get
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    accumulate
 * Signature: (JLjava/nio/Buffer;IJIIIJLmpi/Op;JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_accumulate
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    fence
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_fence
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    start
 * Signature: (JJI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_start
  (JNIEnv *, jobject, jlong, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    complete
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_complete
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    post
 * Signature: (JJI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_post
  (JNIEnv *, jobject, jlong, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    waitFor
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_waitFor
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    test
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_mpi_Win_test
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    lock
 * Signature: (JIII)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_lock
  (JNIEnv *, jobject, jlong, jint, jint, jint);

/*
 * Class:     mpi_Win
 * Method:    unlock
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_unlock
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    setErrhandler
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_setErrhandler
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     mpi_Win
 * Method:    getErrhandler
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_getErrhandler
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    callErrhandler
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_callErrhandler
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    createKeyval_jni
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_mpi_Win_createKeyval_1jni
  (JNIEnv *, jclass);

/*
 * Class:     mpi_Win
 * Method:    freeKeyval_jni
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_freeKeyval_1jni
  (JNIEnv *, jclass, jint);

/*
 * Class:     mpi_Win
 * Method:    setAttr
 * Signature: (JI[B)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_setAttr
  (JNIEnv *, jobject, jlong, jint, jbyteArray);

/*
 * Class:     mpi_Win
 * Method:    getAttr
 * Signature: (JI)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_mpi_Win_getAttr
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    deleteAttr
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_deleteAttr
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    free
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_free
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    getInfo
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_getInfo
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    setInfo
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_setInfo
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     mpi_Win
 * Method:    rPut
 * Signature: (JLjava/nio/Buffer;IJIIIJI)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_rPut
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    rGet
 * Signature: (JLjava/nio/Buffer;IJIIIJI)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_rGet
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    rAccumulate
 * Signature: (JLjava/nio/Buffer;IJIIIJLmpi/Op;JI)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_rAccumulate
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    getAccumulate
 * Signature: (JLjava/nio/Buffer;IJLjava/nio/Buffer;IJIIIJLmpi/Op;JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_getAccumulate
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    rGetAccumulate
 * Signature: (JLjava/nio/Buffer;IJLjava/nio/Buffer;IJIIIJLmpi/Op;JI)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Win_rGetAccumulate
  (JNIEnv *, jobject, jlong, jobject, jint, jlong, jobject, jint, jlong, jint, jint, jint, jlong, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    lockAll
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_lockAll
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    unlockAll
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_unlockAll
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    sync
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_sync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    flush
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_flush
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    flushAll
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_flushAll
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    compareAndSwap
 * Signature: (JLjava/nio/Buffer;Ljava/nio/Buffer;Ljava/nio/Buffer;JII)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_compareAndSwap
  (JNIEnv *, jobject, jlong, jobject, jobject, jobject, jlong, jint, jint);

/*
 * Class:     mpi_Win
 * Method:    fetchAndOp
 * Signature: (JLjava/nio/Buffer;Ljava/nio/Buffer;JIILmpi/Op;JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_fetchAndOp
  (JNIEnv *, jobject, jlong, jobject, jobject, jlong, jint, jint, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    flushLocal
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_flushLocal
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Win
 * Method:    flushLocalAll
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_flushLocalAll
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    getName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_mpi_Win_getName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Win
 * Method:    setName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_mpi_Win_setName
  (JNIEnv *, jobject, jlong, jstring);

#ifdef __cplusplus
}
#endif
#endif
