/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class mpi_Datatype */

#ifndef _Included_mpi_Datatype
#define _Included_mpi_Datatype
#ifdef __cplusplus
extern "C" {
#endif
#undef mpi_Datatype_NULL
#define mpi_Datatype_NULL 0L
#undef mpi_Datatype_BYTE
#define mpi_Datatype_BYTE 1L
#undef mpi_Datatype_CHAR
#define mpi_Datatype_CHAR 2L
#undef mpi_Datatype_SHORT
#define mpi_Datatype_SHORT 3L
#undef mpi_Datatype_BOOLEAN
#define mpi_Datatype_BOOLEAN 4L
#undef mpi_Datatype_INT
#define mpi_Datatype_INT 5L
#undef mpi_Datatype_LONG
#define mpi_Datatype_LONG 6L
#undef mpi_Datatype_FLOAT
#define mpi_Datatype_FLOAT 7L
#undef mpi_Datatype_DOUBLE
#define mpi_Datatype_DOUBLE 8L
#undef mpi_Datatype_PACKED
#define mpi_Datatype_PACKED 9L
#undef mpi_Datatype_INT2
#define mpi_Datatype_INT2 10L
#undef mpi_Datatype_SHORT_INT
#define mpi_Datatype_SHORT_INT 11L
#undef mpi_Datatype_LONG_INT
#define mpi_Datatype_LONG_INT 12L
#undef mpi_Datatype_FLOAT_INT
#define mpi_Datatype_FLOAT_INT 13L
#undef mpi_Datatype_DOUBLE_INT
#define mpi_Datatype_DOUBLE_INT 14L
#undef mpi_Datatype_FLOAT_COMPLEX
#define mpi_Datatype_FLOAT_COMPLEX 15L
#undef mpi_Datatype_DOUBLE_COMPLEX
#define mpi_Datatype_DOUBLE_COMPLEX 16L
/*
 * Class:     mpi_Datatype
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_init
  (JNIEnv *, jclass);

/*
 * Class:     mpi_Datatype
 * Method:    getDatatype
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getDatatype
  (JNIEnv *, jclass, jint);

/*
 * Class:     mpi_Datatype
 * Method:    getLbExtent
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_getLbExtent
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     mpi_Datatype
 * Method:    getTrueLbExtent
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_getTrueLbExtent
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     mpi_Datatype
 * Method:    getSize
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_mpi_Datatype_getSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    commit
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_commit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    free
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_free
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    dup
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_dup
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    getContiguous
 * Signature: (IJ)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getContiguous
  (JNIEnv *, jclass, jint, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    getVector
 * Signature: (IIIJ)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getVector
  (JNIEnv *, jclass, jint, jint, jint, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    getHVector
 * Signature: (IIIJ)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getHVector
  (JNIEnv *, jclass, jint, jint, jint, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    getIndexed
 * Signature: ([I[IJ)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getIndexed
  (JNIEnv *, jclass, jintArray, jintArray, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    getHIndexed
 * Signature: ([I[IJ)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getHIndexed
  (JNIEnv *, jclass, jintArray, jintArray, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    getStruct
 * Signature: ([I[I[Lmpi/Datatype;)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getStruct
  (JNIEnv *, jclass, jintArray, jintArray, jobjectArray);

/*
 * Class:     mpi_Datatype
 * Method:    getResized
 * Signature: (JII)J
 */
JNIEXPORT jlong JNICALL Java_mpi_Datatype_getResized
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     mpi_Datatype
 * Method:    setName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_setName
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     mpi_Datatype
 * Method:    getName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_mpi_Datatype_getName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     mpi_Datatype
 * Method:    createKeyval_jni
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_mpi_Datatype_createKeyval_1jni
  (JNIEnv *, jclass);

/*
 * Class:     mpi_Datatype
 * Method:    freeKeyval_jni
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_freeKeyval_1jni
  (JNIEnv *, jclass, jint);

/*
 * Class:     mpi_Datatype
 * Method:    setAttr
 * Signature: (JI[B)V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_setAttr
  (JNIEnv *, jobject, jlong, jint, jbyteArray);

/*
 * Class:     mpi_Datatype
 * Method:    getAttr
 * Signature: (JI)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_mpi_Datatype_getAttr
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     mpi_Datatype
 * Method:    deleteAttr
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_mpi_Datatype_deleteAttr
  (JNIEnv *, jobject, jlong, jint);

#ifdef __cplusplus
}
#endif
#endif
